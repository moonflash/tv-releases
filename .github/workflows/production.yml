name: Production Deploy

on:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: tv_releases_test
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'

      - name: Install JS dependencies
        run: yarn install --frozen-lockfile

      - name: Run RSpec test suite
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/tv_releases_test
          RAILS_ENV: test
        run: bundle exec rspec

      - name: Run Rubocop
        run: bundle exec rubocop

  build_and_deploy:
    needs: test
    name: Build Docker image, push to registry and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Determine Tag Name
        id: git-tag
        run: |
          TAG_NAME=$(git describe --tags --always)
          echo "Tag Name: $TAG_NAME"
          echo "tag=$TAG_NAME" >> "$GITHUB_OUTPUT"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tv-releases:${{ steps.git-tag.outputs.tag }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/tv-releases:${{ steps.git-tag.outputs.tag }}

      - name: Extract target server SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Test SSH connectivity
        run: |
          touch run-command.sh
          echo "whoami" >> run-command.sh
          echo "hostname" >> run-command.sh
          ssh -T -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_HOST }} < run-command.sh

      - name: Configure AWS credentials (Production)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy production .env file from S3
        run: |
          aws s3 cp s3://${{ secrets.S3_ENV_BUCKET }}/production.env .env

      - name: Deploy to Swarm
        env:
          RAILS_ENV: production
          TAG: ${{ steps.git-tag.outputs.tag }}
        run: |
          export $(grep -v '^#' .env | xargs)
          DOCKER_HOST=${{ secrets.PRODUCTION_SSH_USER }}@${{ secrets.PRODUCTION_HOST }} docker stack deploy --with-registry-auth -c docker-compose.yml tv_releases_production 